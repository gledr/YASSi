/** 
 * @file yassi_replay_wrapper.hpp
 * @brief backend Interface for the Replay Backend
 * 
 * Yassi Implements Symbolic Execution on the LLVM IR and is able
 * to explore designs in C/C++ including Assertion Checking, Test Generation
 *
 * Copyright (C) 2019 Johannes Kepler University
 * @author Sebastian Pointner
 * @author Pablo Gonzales de Aledo
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#ifndef YASSI_REPLAY_WRAPPER
#define YASSI_REPLAY_WRAPPER

#include <yassi_replay.hpp>

/**
 * @brief Function gets called every time a new vector is getting applied
 * 
 * Function is getting called in order to mark the beginning of a new test vector.
 * By calling the function, the beginning of a new trace is getting marked which can be
 * used in order to compare the traces generated by the backend with the measurement traces
 */
extern "C" void next_trace();

/**
 * @brief Function gets called when entering a BasicBlock
 * 
 * @param a: Name of the BasicBlock
 */
extern "C" void __REPLAY_begin_bb(char* a);

/**
 * @brief Function gets called when leaving a BasicBlock
 * 
 * @param a: Name of the BasicBlock
 */
extern "C" void __REPLAY_end_bb(char* a);

/**
 * @brief Function gets called beginning a Function
 * 
 * @param _fn_name: Name of the Function
 * @param _fn_oplist: Parameter of the called Function
 * @param _source_file: File containing the function
 */
extern "C" void __REPLAY_begin_fn(char* _fn_name, char* _fn_oplist, char* _source_file);

/**
 * @brief Function gets called when leaving a Function
 */
extern "C" void __REPLAY_end_fn();

/**
 * @brief Function gets called when starting the simulation
 */
extern "C" void __REPLAY_begin_sim();

/**
 * @brief Function gets called when terminating the simulation
 */
extern "C" void __REPLAY_end_sim();

/**
 * @brief Function gets called when reaching a Conditional Branch
 * 
 * @param value: Take or Reject the Branch
 */
extern "C" void __REPLAY_br_instr_cond(bool value);

/**
 * @brief Function gets called to insert the next stored 16 Bit Testvector
 * 
 * @param _name: Name of the variable
 * @return short int
 */
extern "C" short __REPLAY_vector_short(char* _name);

/**
 * @brief Function gets called to insert the next stored 64 Bit Testvector
 * 
 * @param _name: Name of the variable
 * @return long int
 */
extern "C" long __REPLAY_vector_long(char* _name);

/**
 * @brief Function gets called to insert the next stored 32 Bit Testvector
 * 
 * @param _name: Name of the variable
 * @return int
 */
extern "C" int __REPLAY_vector_int(char* _name);

/**
 * @brief Function gets called to insert the next stored Float Testvector
 * 
 * @param _name: Name of the variable
 * @return float
 */
extern "C" float __REPLAY_vector_float(char* _name);

/**
 * @brief Function gets called to insert the next stored Double Testvector
 * 
 * @param _name: Name of the variable
 * @return double
 */
extern "C" double __REPLAY_vector_double(char* _name);


/**
 * @brief Function gets called to insert the next stored 8 Bit Testvector
 * 
 * @param: Name of the variable
 * @return char
 */
extern "C" char __REPLAY_vector_char(char* _name);

/**
 * @brief Function gets called when a Verification Assumption has been reached
 * 
 * @param _assumption: Shows if the assumption has been fulfilled
 */
void __VERIFIER_assume(int _assumption);


/**
 * @brief Function gets called when a Verification Assetion has been reached
 * 
 * @param assertion: Shows if the assertion has been fulfilled
 */
void __VERIFIER_assert (int assertion);

#endif /* YASSI_REPLAY_WRAPPER */
